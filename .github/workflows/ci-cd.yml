name: EKS Blue-Green Deployment

permissions:
  contents: read
  actions: read

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 6 * * *'

jobs:
  deploy-to-eks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name moon-cluster --region ap-southeast-1

      - name: Deploy Green (v1) services (first-time only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/agent-service.yaml
          kubectl apply -f k8s/sales-integration-service.yaml
          kubectl apply -f k8s/notification-service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Deploy Blue (v2) versions of services
        run: |
          kubectl apply -f k8s/agent-service-v2.yaml
          kubectl apply -f k8s/sales-integration-service-v2.yaml
          kubectl apply -f k8s/notification-service-v2.yaml

      - name: Switch traffic to v2 (Blue-Green switch)
        run: |
          kubectl patch service agent-service -n cmm707-microservices -p '{"spec":{"selector":{"app":"agent-service","version":"v2"}}}'
          kubectl patch service sales-integration-service -n cmm707-microservices -p '{"spec":{"selector":{"app":"sales-integration-service","version":"v2"}}}'
          kubectl patch service notification-service -n cmm707-microservices -p '{"spec":{"selector":{"app":"notification-service","version":"v2"}}}'

      - name: Install test dependencies
        run: |
          pip install -r tests/requirements.txt

      - name: Run comprehensive API tests
        run: |
          cd tests
          python run_tests.py --env eks --html --verbose

      - name: Archive test reports
        if: ${{ always() }}
        uses: ./.github/actions/upload-artifact
        with:
          name: test-reports
          path: tests/reports/eks/

      - name: Rollback to v1 if tests fail
        if: ${{ failure() }}
        run: |
          echo "Tests failed. Rolling back to version v1..."
          kubectl patch service agent-service -n cmm707-microservices -p '{"spec":{"selector":{"version":"v1"}}}'
          kubectl patch service sales-integration-service -n cmm707-microservices -p '{"spec":{"selector":{"version":"v1"}}}'
          kubectl patch service notification-service -n cmm707-microservices -p '{"spec":{"selector":{"version":"v1"}}}'

      - name: Verify Deployment
        run: |
          kubectl get pods -n cmm707-microservices
          kubectl get svc -n cmm707-microservices